"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findArmorDependencyPackage = exports.MANIFEST_RELATIVE_PATH = exports.MANIFEST_BASENAME = exports.DEFAULT_ARMOR_HOME = void 0;
exports.hasArmorDependency = hasArmorDependency;
exports.resolveManifestPath = exports.resolveArmorHome = exports.readPackageInDir = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _os = require("os");
var _path = _interopRequireDefault(require("path"));
var _readPkg = _interopRequireDefault(require("read-pkg"));
var _npm = require("./npm");
const DEFAULT_ARMOR_HOME = exports.DEFAULT_ARMOR_HOME = _path.default.resolve((0, _os.homedir)(), '.armor');
const MANIFEST_BASENAME = exports.MANIFEST_BASENAME = 'extensions.yaml';
const MANIFEST_RELATIVE_PATH = exports.MANIFEST_RELATIVE_PATH = _path.default.join('node_modules', '.cache', 'armor', MANIFEST_BASENAME);
const OLD_VERSION_REGEX = /^[01]/;
async function hasArmorDependency(cwd) {
  return Boolean(await findArmorDependencyPackage(cwd));
}
const findArmorDependencyPackage = exports.findArmorDependencyPackage = _lodash.default.memoize(async (cwd = process.cwd()) => {
  const readPkg = async cwd => {
    let pkgPath;
    try {
      var _ref, _pkg$dependencies$arm, _pkg$dependencies, _pkg$devDependencies, _pkg$peerDependencies;
      const pkg = await readPackageInDir(cwd);
      const version = (_ref = (_pkg$dependencies$arm = pkg === null || pkg === void 0 ? void 0 : (_pkg$dependencies = pkg.dependencies) === null || _pkg$dependencies === void 0 ? void 0 : _pkg$dependencies.armor) !== null && _pkg$dependencies$arm !== void 0 ? _pkg$dependencies$arm : pkg === null || pkg === void 0 ? void 0 : (_pkg$devDependencies = pkg.devDependencies) === null || _pkg$devDependencies === void 0 ? void 0 : _pkg$devDependencies.armor) !== null && _ref !== void 0 ? _ref : pkg === null || pkg === void 0 ? void 0 : (_pkg$peerDependencies = pkg.peerDependencies) === null || _pkg$peerDependencies === void 0 ? void 0 : _pkg$peerDependencies.armor;
      pkgPath = version && !OLD_VERSION_REGEX.test(String(version)) ? cwd : undefined;
    } catch {}
    return pkgPath;
  };
  cwd = _path.default.resolve(cwd);
  let pkgDir;
  try {
    const {
      json: list
    } = await _npm.npm.exec('list', ['--long', '--json'], {
      cwd
    });
    ({
      path: pkgDir
    } = list);
    if (pkgDir !== cwd) {
      var _pkgDir;
      pkgDir = (_pkgDir = pkgDir) !== null && _pkgDir !== void 0 ? _pkgDir : cwd;
    }
  } catch {
    pkgDir = cwd;
  }
  return await readPkg(pkgDir);
});
const readPackageInDir = exports.readPackageInDir = _lodash.default.memoize(async function _readPackageInDir(cwd) {
  return await (0, _readPkg.default)({
    cwd,
    normalize: true
  });
});
const resolveArmorHome = exports.resolveArmorHome = _lodash.default.memoize(async function _resolveArmorHome(cwd = process.cwd()) {
  if (!_path.default.isAbsolute(cwd)) {
    throw new TypeError('`cwd` parameter must be an absolute path');
  }
  if (process.env.ARMOR_HOME) {
    return _path.default.resolve(cwd, process.env.ARMOR_HOME);
  }
  const pkgPath = await findArmorDependencyPackage(cwd);
  if (pkgPath) {
    return pkgPath;
  }
  return DEFAULT_ARMOR_HOME;
});
const resolveManifestPath = exports.resolveManifestPath = _lodash.default.memoize(async function _resolveManifestPath(armorHome) {
  var _armorHome;
  armorHome = (_armorHome = armorHome) !== null && _armorHome !== void 0 ? _armorHome : await resolveArmorHome();
  return _path.default.join(armorHome, MANIFEST_RELATIVE_PATH);
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
