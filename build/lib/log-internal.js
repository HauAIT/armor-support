"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SecureValuesPreprocessor = exports.SECURE_VALUES_PREPROCESSOR = void 0;
require("source-map-support/register");
var _fs = _interopRequireDefault(require("./fs"));
var _lodash = _interopRequireDefault(require("lodash"));
const DEFAULT_REPLACER = '**SECURE**';
function isLogFilterRegex(value) {
  return 'pattern' in value;
}
class SecureValuesPreprocessor {
  constructor() {
    this._rules = [];
  }
  get rules() {
    return this._rules;
  }
  parseRule(rule) {
    let pattern;
    let replacer = DEFAULT_REPLACER;
    let flags = ['g'];
    if (_lodash.default.isString(rule)) {
      if (rule.length === 0) {
        throw new Error(`${JSON.stringify(rule)} -> The value must not be empty`);
      }
      pattern = `\\b${_lodash.default.escapeRegExp(rule)}\\b`;
    } else if (_lodash.default.isPlainObject(rule)) {
      if (isLogFilterRegex(rule)) {
        if (!_lodash.default.isString(rule.pattern) || rule.pattern.length === 0) {
          throw new Error(`${JSON.stringify(rule)} -> The value of 'pattern' must be a valid non-empty string`);
        }
        pattern = rule.pattern;
      } else if (_lodash.default.has(rule, 'text')) {
        if (!_lodash.default.isString(rule.text) || rule.text.length === 0) {
          throw new Error(`${JSON.stringify(rule)} -> The value of 'text' must be a valid non-empty string`);
        }
        pattern = `\\b${_lodash.default.escapeRegExp(rule.text)}\\b`;
      }
      if (!pattern) {
        throw new Error(`${JSON.stringify(rule)} -> Must either have a field named 'pattern' or 'text'`);
      }
      if (_lodash.default.has(rule, 'flags')) {
        for (const flag of ['i', 'g', 'm', 's', 'u', 'y']) {
          if (_lodash.default.includes(rule.flags, flag)) {
            flags.push(flag);
          }
        }
        flags = _lodash.default.uniq(flags);
      }
      if (_lodash.default.isString(rule.replacer)) {
        replacer = rule.replacer;
      }
    } else {
      throw new Error(`${JSON.stringify(rule)} -> Must either be a string or an object`);
    }
    return {
      pattern: new RegExp(pattern, flags.join('')),
      replacer
    };
  }
  async loadRules(source) {
    let rules;
    if (_lodash.default.isArray(source)) {
      rules = source;
    } else {
      if (!(await _fs.default.exists(source))) {
        throw new Error(`'${source}' does not exist or is not accessible`);
      }
      try {
        rules = JSON.parse(await _fs.default.readFile(source, 'utf8'));
      } catch (e) {
        throw new Error(`'${source}' must be a valid JSON file. Original error: ${e.message}`);
      }
      if (!_lodash.default.isArray(rules)) {
        throw new Error(`'${source}' must contain a valid JSON array`);
      }
    }
    const issues = [];
    this._rules = [];
    for (const rule of rules) {
      try {
        this._rules.push(this.parseRule(rule));
      } catch (e) {
        issues.push(e.message);
      }
    }
    return issues;
  }
  preprocess(str) {
    if (this._rules.length === 0 || !_lodash.default.isString(str)) {
      return str;
    }
    let result = str;
    for (const rule of this._rules) {
      result = result.replace(rule.pattern, rule.replacer);
    }
    return result;
  }
}
exports.SecureValuesPreprocessor = SecureValuesPreprocessor;
const SECURE_VALUES_PREPROCESSOR = exports.SECURE_VALUES_PREPROCESSOR = new SecureValuesPreprocessor();
var _default = exports.default = SECURE_VALUES_PREPROCESSOR;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
