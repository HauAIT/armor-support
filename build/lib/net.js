"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadFile = downloadFile;
exports.uploadFile = uploadFile;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _fs = _interopRequireDefault(require("./fs"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _util = require("./util");
var _logger = _interopRequireDefault(require("./logger"));
var _jsftp = _interopRequireDefault(require("jsftp"));
var _timing = _interopRequireDefault(require("./timing"));
var _axios = _interopRequireDefault(require("axios"));
var _formData = _interopRequireDefault(require("form-data"));
const DEFAULT_TIMEOUT_MS = 4 * 60 * 1000;
function isAxiosAuth(value) {
  return _lodash.default.isPlainObject(value);
}
function toAxiosAuth(auth) {
  if (!isAxiosAuth(auth)) {
    return null;
  }
  const axiosAuth = {
    username: 'username' in auth ? auth.username : auth.user,
    password: 'password' in auth ? auth.password : auth.pass
  };
  return axiosAuth.username && axiosAuth.password ? axiosAuth : null;
}
async function uploadFileToHttp(localFileStream, parsedUri, uploadOptions = {}) {
  const {
    method = 'POST',
    timeout = DEFAULT_TIMEOUT_MS,
    headers,
    auth,
    fileFieldName = 'file',
    formFields
  } = uploadOptions;
  const {
    href
  } = parsedUri;
  const requestOpts = {
    url: href,
    method,
    timeout,
    maxContentLength: Infinity,
    maxBodyLength: Infinity
  };
  const axiosAuth = toAxiosAuth(auth);
  if (axiosAuth) {
    requestOpts.auth = axiosAuth;
  }
  if (fileFieldName) {
    const form = new _formData.default();
    if (formFields) {
      let pairs = [];
      if (_lodash.default.isArray(formFields)) {
        pairs = formFields;
      } else if (_lodash.default.isPlainObject(formFields)) {
        pairs = _lodash.default.toPairs(formFields);
      }
      for (const [key, value] of pairs) {
        if (_lodash.default.toLower(key) !== _lodash.default.toLower(fileFieldName)) {
          form.append(key, value);
        }
      }
    }
    form.append(fileFieldName, localFileStream);
    requestOpts.headers = {
      ...(_lodash.default.isPlainObject(headers) ? headers : {}),
      ...form.getHeaders()
    };
    requestOpts.data = form;
  } else {
    if (_lodash.default.isPlainObject(headers)) {
      requestOpts.headers = headers;
    }
    requestOpts.data = localFileStream;
  }
  _logger.default.debug(`Performing ${method} to ${href} with options (excluding data): ` + JSON.stringify(_lodash.default.omit(requestOpts, ['data'])));
  const {
    status,
    statusText
  } = await (0, _axios.default)(requestOpts);
  _logger.default.info(`Server response: ${status} ${statusText}`);
}
async function uploadFileToFtp(localFileStream, parsedUri, uploadOptions = {}) {
  const {
    auth
  } = uploadOptions;
  const {
    hostname,
    port,
    protocol,
    pathname
  } = parsedUri;
  const ftpOpts = {
    host: hostname,
    port: !_lodash.default.isUndefined(port) ? _lodash.default.parseInt(port) : 21
  };
  if (auth !== null && auth !== void 0 && auth.user && auth !== null && auth !== void 0 && auth.pass) {
    ftpOpts.user = auth.user;
    ftpOpts.pass = auth.pass;
  }
  _logger.default.debug(`${protocol} upload options: ${JSON.stringify(ftpOpts)}`);
  return await new _bluebird.default((resolve, reject) => {
    new _jsftp.default(ftpOpts).put(localFileStream, pathname, err => {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}
function isHttpUploadOptions(opts, url) {
  try {
    const {
      protocol
    } = url;
    return protocol === 'http:' || protocol === 'https:';
  } catch {
    return false;
  }
}
function isNotHttpUploadOptions(opts, url) {
  try {
    const {
      protocol
    } = url;
    return protocol === 'ftp:';
  } catch {
    return false;
  }
}
async function uploadFile(localPath, remoteUri, uploadOptions = {}) {
  if (!(await _fs.default.exists(localPath))) {
    throw new Error(`'${localPath}' does not exists or is not accessible`);
  }
  const {
    isMetered = true
  } = uploadOptions;
  const url = new URL(remoteUri);
  const {
    size
  } = await _fs.default.stat(localPath);
  if (isMetered) {
    _logger.default.info(`Uploading '${localPath}' of ${(0, _util.toReadableSizeString)(size)} size to '${remoteUri}'`);
  }
  const timer = new _timing.default().start();
  if (isHttpUploadOptions(uploadOptions, url)) {
    if (!uploadOptions.fileFieldName) {
      uploadOptions.headers = {
        ...(_lodash.default.isPlainObject(uploadOptions.headers) ? uploadOptions.headers : {}),
        'Content-Length': size
      };
    }
    await uploadFileToHttp(_fs.default.createReadStream(localPath), url, uploadOptions);
  } else if (isNotHttpUploadOptions(uploadOptions, url)) {
    await uploadFileToFtp(_fs.default.createReadStream(localPath), url, uploadOptions);
  } else {
    throw new Error(`Cannot upload the file at '${localPath}' to '${remoteUri}'. ` + `Unsupported remote protocol '${url.protocol}'. ` + `Only http/https and ftp/ftps protocols are supported.`);
  }
  if (isMetered) {
    _logger.default.info(`Uploaded '${localPath}' of ${(0, _util.toReadableSizeString)(size)} size in ` + `${timer.getDuration().asSeconds.toFixed(3)}s`);
  }
}
async function downloadFile(remoteUrl, dstPath, downloadOptions = {}) {
  const {
    isMetered = true,
    auth,
    timeout = DEFAULT_TIMEOUT_MS,
    headers
  } = downloadOptions;
  const requestOpts = {
    url: remoteUrl,
    responseType: 'stream',
    timeout
  };
  const axiosAuth = toAxiosAuth(auth);
  if (axiosAuth) {
    requestOpts.auth = axiosAuth;
  }
  if (_lodash.default.isPlainObject(headers)) {
    requestOpts.headers = headers;
  }
  const timer = new _timing.default().start();
  let responseLength;
  try {
    const writer = _fs.default.createWriteStream(dstPath);
    const {
      data: responseStream,
      headers: responseHeaders
    } = await (0, _axios.default)(requestOpts);
    responseLength = parseInt(responseHeaders['content-length'] || '0', 10);
    responseStream.pipe(writer);
    await new _bluebird.default((resolve, reject) => {
      responseStream.once('error', reject);
      writer.once('finish', resolve);
      writer.once('error', e => {
        responseStream.unpipe(writer);
        reject(e);
      });
    });
  } catch (err) {
    throw new Error(`Cannot download the file from ${remoteUrl}: ${err.message}`);
  }
  const {
    size
  } = await _fs.default.stat(dstPath);
  if (responseLength && size !== responseLength) {
    await _fs.default.rimraf(dstPath);
    throw new Error(`The size of the file downloaded from ${remoteUrl} (${size} bytes) ` + `differs from the one in Content-Length response header (${responseLength} bytes)`);
  }
  if (isMetered) {
    const secondsElapsed = timer.getDuration().asSeconds;
    _logger.default.debug(`${remoteUrl} (${(0, _util.toReadableSizeString)(size)}) ` + `has been downloaded to '${dstPath}' in ${secondsElapsed.toFixed(3)}s`);
    if (secondsElapsed >= 2) {
      const bytesPerSec = Math.floor(size / secondsElapsed);
      _logger.default.debug(`Approximate download speed: ${(0, _util.toReadableSizeString)(bytesPerSec)}/s`);
    }
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
