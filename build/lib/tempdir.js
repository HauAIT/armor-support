"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.open = open;
exports.openDir = void 0;
exports.path = path;
exports.staticDir = staticDir;
require("source-map-support/register");
var _fs = _interopRequireDefault(require("./fs"));
var _os = _interopRequireDefault(require("os"));
var _path = _interopRequireDefault(require("path"));
var _constants = _interopRequireDefault(require("constants"));
var _logger = _interopRequireDefault(require("./logger"));
const RDWR_EXCL = _constants.default.O_CREAT | _constants.default.O_TRUNC | _constants.default.O_RDWR | _constants.default.O_EXCL;
async function tempDir() {
  const now = new Date();
  const filePath = _path.default.join(process.env.ARMOR_TMP_DIR || _os.default.tmpdir(), [now.getFullYear(), now.getMonth(), now.getDate(), '-', process.pid, '-', (Math.random() * 0x100000000 + 1).toString(36)].join(''));
  await _fs.default.mkdir(filePath);
  return filePath;
}
async function path(rawAffixes, defaultPrefix) {
  const affixes = parseAffixes(rawAffixes, defaultPrefix);
  const name = `${affixes.prefix || ''}${affixes.suffix || ''}`;
  const tempDirectory = await tempDir();
  return _path.default.join(tempDirectory, name);
}
async function open(affixes) {
  const filePath = await path(affixes, 'f-');
  try {
    let fd = await _fs.default.open(filePath, RDWR_EXCL, 0o600);
    return {
      path: filePath,
      fd
    };
  } catch (err) {
    return _logger.default.errorAndThrow(err);
  }
}
function parseAffixes(rawAffixes, defaultPrefix) {
  let affixes = {};
  if (rawAffixes) {
    switch (typeof rawAffixes) {
      case 'string':
        affixes.prefix = rawAffixes;
        break;
      case 'object':
        affixes = rawAffixes;
        break;
      default:
        throw new Error(`Unknown affix declaration: ${affixes}`);
    }
  } else {
    affixes.prefix = defaultPrefix;
  }
  return affixes;
}
const _static = tempDir();
const openDir = exports.openDir = tempDir;
async function staticDir() {
  return _static;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
