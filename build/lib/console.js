"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.console = exports.CliConsole = void 0;
Object.defineProperty(exports, "symbols", {
  enumerable: true,
  get: function () {
    return _logSymbols.default;
  }
});
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _supportsColor = require("supports-color");
var _console2 = require("console");
require("@colors/colors");
var _logSymbols = _interopRequireDefault(require("log-symbols"));
var _stream = require("stream");
class NullWritable extends _stream.Writable {
  _write(chunk, encoding, callback) {
    setImmediate(callback);
  }
}
var _console = (0, _classPrivateFieldLooseKey2.default)("console");
var _useSymbols = (0, _classPrivateFieldLooseKey2.default)("useSymbols");
var _useColor = (0, _classPrivateFieldLooseKey2.default)("useColor");
class CliConsole {
  constructor({
    jsonMode = false,
    useSymbols = true,
    useColor
  } = {}) {
    Object.defineProperty(this, _console, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _useSymbols, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _useColor, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _console)[_console] = new _console2.Console(process.stdout, jsonMode ? new NullWritable() : process.stderr);
    (0, _classPrivateFieldLooseBase2.default)(this, _useSymbols)[_useSymbols] = Boolean(useSymbols);
    (0, _classPrivateFieldLooseBase2.default)(this, _useColor)[_useColor] = Boolean(useColor !== null && useColor !== void 0 ? useColor : (0, _supportsColor.supportsColor)(process.stderr));
  }
  decorate(msg, symbol) {
    if (_lodash.default.isString(msg)) {
      let newMsg = msg;
      if (_lodash.default.isString(symbol) && (0, _classPrivateFieldLooseBase2.default)(this, _useSymbols)[_useSymbols]) {
        newMsg = `${_logSymbols.default[symbol]} ${newMsg}`;
        if ((0, _classPrivateFieldLooseBase2.default)(this, _useColor)[_useColor]) {
          newMsg = newMsg[CliConsole.symbolToColor[symbol]];
        }
      }
      return newMsg;
    }
    return msg;
  }
  json(value) {
    (0, _classPrivateFieldLooseBase2.default)(this, _console)[_console].log(JSON.stringify(value));
  }
  log(message, ...args) {
    (0, _classPrivateFieldLooseBase2.default)(this, _console)[_console].error(message, ...args);
  }
  ok(message, ...args) {
    (0, _classPrivateFieldLooseBase2.default)(this, _console)[_console].error(this.decorate(message, 'success'), ...args);
  }
  debug(message, ...args) {
    this.log(message, ...args);
  }
  dump(item, opts) {
    (0, _classPrivateFieldLooseBase2.default)(this, _console)[_console].dir(item, opts);
  }
  info(message, ...args) {
    this.log(this.decorate(message, 'info'), ...args);
  }
  warn(message, ...args) {
    this.log(this.decorate(message, 'warning'), ...args);
  }
  error(message, ...args) {
    this.log(this.decorate(message, 'error'), ...args);
  }
}
exports.CliConsole = CliConsole;
CliConsole.symbolToColor = {
  success: 'green',
  info: 'cyan',
  warning: 'yellow',
  error: 'red'
};
const console = exports.console = new CliConsole();require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
