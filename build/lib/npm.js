"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.npm = exports.NPM = exports.INSTALL_LOCKFILE_RELATIVE_PATH = exports.CACHE_DIR_RELATIVE_PATH = void 0;
require("source-map-support/register");
var _path = _interopRequireDefault(require("path"));
var _semver = _interopRequireDefault(require("semver"));
var _env = require("./env");
var _aitProcess = require("ait-process");
var _fs = require("./fs");
var util = _interopRequireWildcard(require("./util"));
var system = _interopRequireWildcard(require("./system"));
var _resolveFrom = _interopRequireDefault(require("resolve-from"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const CACHE_DIR_RELATIVE_PATH = exports.CACHE_DIR_RELATIVE_PATH = _path.default.join('node_modules', '.cache', 'armor');
const INSTALL_LOCKFILE_RELATIVE_PATH = exports.INSTALL_LOCKFILE_RELATIVE_PATH = _path.default.join(CACHE_DIR_RELATIVE_PATH, '.install.lock');
class NPM {
  _getInstallLockfilePath(cwd) {
    return _path.default.join(cwd, INSTALL_LOCKFILE_RELATIVE_PATH);
  }
  async exec(cmd, args, opts, execOpts = {}) {
    let {
      cwd,
      json,
      lockFile
    } = opts;
    const aitProcessExecOpts = {
      ...execOpts,
      cwd
    };
    args.unshift(cmd);
    if (json) {
      args.push('--json');
    }
    const npmCmd = system.isWindows() ? 'npm.cmd' : 'npm';
    let runner = async () => await (0, _aitProcess.exec)(npmCmd, args, aitProcessExecOpts);
    if (lockFile) {
      const acquireLock = util.getLockFileGuard(lockFile);
      const _runner = runner;
      runner = async () => await acquireLock(_runner);
    }
    let ret;
    try {
      const {
        stdout,
        stderr,
        code
      } = await runner();
      ret = {
        stdout,
        stderr,
        code
      };
      try {
        ret.json = JSON.parse(stdout);
      } catch (ign) {}
    } catch (e) {
      const {
        stdout = '',
        stderr = '',
        code = null
      } = e;
      const err = new Error(`npm command '${args.join(' ')}' failed with code ${code}.\n\nSTDOUT:\n${stdout.trim()}\n\nSTDERR:\n${stderr.trim()}`);
      throw err;
    }
    return ret;
  }
  async getLatestVersion(cwd, pkg) {
    try {
      var _await$this$exec$json, _await$this$exec$json2;
      return (_await$this$exec$json = (_await$this$exec$json2 = (await this.exec('view', [pkg, 'dist-tags'], {
        json: true,
        cwd
      })).json) === null || _await$this$exec$json2 === void 0 ? void 0 : _await$this$exec$json2.latest) !== null && _await$this$exec$json !== void 0 ? _await$this$exec$json : null;
    } catch (err) {
      if (!(err !== null && err !== void 0 && err.message.includes('E404'))) {
        throw err;
      }
      return null;
    }
  }
  async getLatestSafeUpgradeVersion(cwd, pkg, curVersion) {
    try {
      const allVersions = (await this.exec('view', [pkg, 'versions'], {
        json: true,
        cwd
      })).json;
      return this.getLatestSafeUpgradeFromVersions(curVersion, allVersions);
    } catch (err) {
      if (!(err !== null && err !== void 0 && err.message.includes('E404'))) {
        throw err;
      }
      return null;
    }
  }
  async list(cwd, pkg) {
    return (await this.exec('list', pkg ? [pkg] : [], {
      cwd,
      json: true
    })).json;
  }
  getLatestSafeUpgradeFromVersions(curVersion, allVersions) {
    var _semver$parse;
    let safeUpgradeVer = null;
    const curSemver = (_semver$parse = _semver.default.parse(curVersion)) !== null && _semver$parse !== void 0 ? _semver$parse : _semver.default.parse(_semver.default.coerce(curVersion));
    if (curSemver === null) {
      throw new Error(`Could not parse current version '${curVersion}'`);
    }
    for (const testVer of allVersions) {
      var _semver$parse2;
      const testSemver = (_semver$parse2 = _semver.default.parse(testVer)) !== null && _semver$parse2 !== void 0 ? _semver$parse2 : _semver.default.parse(_semver.default.coerce(testVer));
      if (testSemver === null) {
        continue;
      }
      if (testSemver.prerelease.length > 0) {
        continue;
      }
      if (curSemver.compare(testSemver) === 1) {
        continue;
      }
      if (testSemver.major > curSemver.major) {
        continue;
      }
      if (safeUpgradeVer === null || testSemver.compare(safeUpgradeVer) === 1) {
        safeUpgradeVer = testSemver;
      }
    }
    if (safeUpgradeVer) {
      safeUpgradeVer = safeUpgradeVer.format();
    }
    return safeUpgradeVer;
  }
  async installPackage(cwd, pkgName, {
    pkgVer,
    installType
  } = {}) {
    let dummyPkgJson;
    const dummyPkgPath = _path.default.join(cwd, 'package.json');
    try {
      dummyPkgJson = JSON.parse(await _fs.fs.readFile(dummyPkgPath, 'utf8'));
    } catch (err) {
      if (err.code === 'ENOENT') {
        dummyPkgJson = {};
        await _fs.fs.writeFile(dummyPkgPath, JSON.stringify(dummyPkgJson, null, 2), 'utf8');
      } else {
        throw err;
      }
    }
    const installOpts = ['--save-dev'];
    if (!(await (0, _env.hasArmorDependency)(cwd))) {
      if (process.env.ARMOR_OMIT_PEER_DEPS) {
        installOpts.push('--omit=peer');
      }
      installOpts.push('--save-exact', '--global-style', '--no-package-lock');
    }
    const cmd = installType === 'local' ? 'link' : 'install';
    const res = await this.exec(cmd, [...installOpts, pkgVer ? `${pkgName}@${pkgVer}` : pkgName], {
      cwd,
      json: true,
      lockFile: this._getInstallLockfilePath(cwd)
    });
    if (res.json) {
      if (res.json.error) {
        throw new Error(res.json.error);
      }
    }
    const pkgJsonPath = (0, _resolveFrom.default)(cwd, `${pkgName}/package.json`);
    try {
      const pkgJson = await _fs.fs.readFile(pkgJsonPath, 'utf8');
      const pkg = JSON.parse(pkgJson);
      return {
        installPath: _path.default.dirname(pkgJsonPath),
        pkg
      };
    } catch {
      throw new Error('The package was not downloaded correctly; its package.json ' + 'did not exist or was unreadable. We looked for it at ' + pkgJsonPath);
    }
  }
  async uninstallPackage(cwd, pkg) {
    await this.exec('uninstall', [pkg], {
      cwd,
      lockFile: this._getInstallLockfilePath(cwd)
    });
  }
}
exports.NPM = NPM;
const npm = exports.npm = new NPM();require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
