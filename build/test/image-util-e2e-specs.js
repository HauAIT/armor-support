"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
var _imageUtil = require("../lib/image-util");
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _chai = _interopRequireDefault(require("chai"));
var _2 = require("..");
var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));
_chai.default.use(_chaiAsPromised.default);
_chai.default.should();
const FIXTURES_ROOT = _path.default.resolve(__dirname, '..', '..', 'test', 'images');
async function getImage(name) {
  const imagePath = _path.default.resolve(FIXTURES_ROOT, name);
  return await _2.fs.readFile(imagePath, 'utf8');
}
describe('image-util', function () {
  before(function () {
    return this.skip();
  });
  describe('cropBase64Image', function () {
    let originalImage = null;
    before(async function () {
      const originalImage64 = await getImage('full-image.b64');
      originalImage = await (0, _imageUtil.base64ToImage)(originalImage64);
      originalImage.width.should.be.equal(640, 'unexpected width');
      originalImage.height.should.be.equal(1136, 'unexpected height');
    });
    it('should verify that an image is cropped correctly', async function () {
      const croppedImage = await (0, _imageUtil.cropImage)(originalImage, {
        left: 35,
        top: 107,
        width: 323,
        height: 485
      });
      croppedImage.width.should.be.equal(323, 'unexpected width');
      croppedImage.height.should.be.equal(485, 'unexpected height');
      const croppedImageShouldBe = await getImage('cropped-image.b64');
      const croppedImage64 = await (0, _imageUtil.imageToBase64)(croppedImage);
      croppedImage64.should.be.equal(croppedImageShouldBe);
    });
  });
  describe('OpenCV helpers', function () {
    this.timeout(120000);
    let imgFixture = null;
    let fullImage = null;
    let partialImage = null;
    let originalImage = null;
    let changedImage = null;
    let rotatedImage = null;
    let numberImage = null;
    before(async function () {
      const imagePath = _path.default.resolve(FIXTURES_ROOT, 'full-image.b64');
      imgFixture = Buffer.from(await _2.fs.readFile(imagePath, 'binary'), 'base64');
      fullImage = await _2.fs.readFile(_path.default.resolve(FIXTURES_ROOT, 'findwaldo.jpg'));
      partialImage = await _2.fs.readFile(_path.default.resolve(FIXTURES_ROOT, 'waldo.jpg'));
      originalImage = await _2.fs.readFile(_path.default.resolve(FIXTURES_ROOT, 'cc1.png'));
      changedImage = await _2.fs.readFile(_path.default.resolve(FIXTURES_ROOT, 'cc2.png'));
      numberImage = await _2.fs.readFile(_path.default.resolve(FIXTURES_ROOT, 'number5.png'));
      rotatedImage = await _2.fs.readFile(_path.default.resolve(FIXTURES_ROOT, 'cc_rotated.png'));
    });
    describe('getImagesMatches', function () {
      it('should calculate the number of matches between two images', async function () {
        for (const detectorName of ['AKAZE', 'ORB']) {
          const {
            count,
            totalCount
          } = await (0, _imageUtil.getImagesMatches)(fullImage, fullImage, {
            detectorName
          });
          count.should.be.above(0);
          totalCount.should.eql(count);
        }
      });
      it('should visualize matches between two images', async function () {
        const {
          visualization
        } = await (0, _imageUtil.getImagesMatches)(fullImage, fullImage, {
          visualize: true
        });
        visualization.should.not.be.empty;
      });
      it('should visualize matches between two images and apply goodMatchesFactor', async function () {
        const {
          visualization,
          points1,
          rect1,
          points2,
          rect2
        } = await (0, _imageUtil.getImagesMatches)(rotatedImage, originalImage, {
          visualize: true,
          matchFunc: 'BruteForceHamming',
          goodMatchesFactor: 40
        });
        visualization.should.not.be.empty;
        points1.length.should.be.above(4);
        rect1.x.should.be.above(0);
        rect1.y.should.be.above(0);
        rect1.width.should.be.above(0);
        rect1.height.should.be.above(0);
        points2.length.should.be.above(4);
        rect2.x.should.be.above(0);
        rect2.y.should.be.above(0);
        rect2.width.should.be.above(0);
        rect2.height.should.be.above(0);
      });
    });
    describe('getImagesSimilarity', function () {
      it('should calculate the similarity score between two images', async function () {
        const {
          score
        } = await (0, _imageUtil.getImagesSimilarity)(imgFixture, imgFixture);
        score.should.be.above(0);
      });
      it('should visualize the similarity between two images', async function () {
        const {
          visualization
        } = await (0, _imageUtil.getImagesSimilarity)(originalImage, changedImage, {
          visualize: true
        });
        visualization.should.not.be.empty;
      });
    });
    describe('getImageOccurrence', function () {
      it('should calculate the partial image position in the full image', async function () {
        const {
          rect,
          score
        } = await (0, _imageUtil.getImageOccurrence)(fullImage, partialImage);
        rect.x.should.be.above(0);
        rect.y.should.be.above(0);
        rect.width.should.be.above(0);
        rect.height.should.be.above(0);
        score.should.be.above(0);
      });
      it('should reject matches that fall below a threshold', async function () {
        await (0, _imageUtil.getImageOccurrence)(fullImage, partialImage, {
          threshold: 1.0
        }).should.eventually.be.rejectedWith(/threshold/);
      });
      it('should visualize the partial image position in the full image', async function () {
        const {
          visualization
        } = await (0, _imageUtil.getImageOccurrence)(fullImage, partialImage, {
          visualize: true
        });
        visualization.should.not.be.empty;
      });
      describe('multiple', function () {
        it('should return matches in the full image', async function () {
          const {
            multiple
          } = await (0, _imageUtil.getImageOccurrence)(originalImage, numberImage, {
            threshold: 0.8,
            multiple: true
          });
          multiple.length.should.be.eq(3);
          for (const result of multiple) {
            result.rect.x.should.be.above(0);
            result.rect.y.should.be.above(0);
            result.rect.width.should.be.above(0);
            result.rect.height.should.be.above(0);
            result.score.should.be.above(0);
          }
        });
        it('should reject matches that fall below a threshold', async function () {
          await (0, _imageUtil.getImageOccurrence)(originalImage, numberImage, {
            threshold: 1.0,
            multiple: true
          }).should.eventually.be.rejectedWith(/threshold/);
        });
        it('should visualize the partial image position in the full image', async function () {
          const {
            multiple
          } = await (0, _imageUtil.getImageOccurrence)(originalImage, numberImage, {
            visualize: true,
            multiple: true
          });
          for (const result of multiple) {
            result.visualization.should.not.be.empty;
          }
        });
      });
    });
  });
  describe('Jimp helpers', function () {
    it('should get a jimp object using image buffer', async function () {
      const base64Image = await getImage('cropped-image.b64');
      const imageBuffer = Buffer.from(base64Image, 'base64');
      const jimpImg = await (0, _imageUtil.getJimpImage)(imageBuffer);
      jimpImg.hash().should.eql('80000000000');
      jimpImg.bitmap.height.should.eql(485);
      jimpImg.bitmap.width.should.eql(323);
    });
    it('should get a jimp object using b64 string', async function () {
      const base64Image = await getImage('cropped-image.b64');
      const jimpImg = await (0, _imageUtil.getJimpImage)(base64Image);
      jimpImg.hash().should.eql('80000000000');
      jimpImg.bitmap.height.should.eql(485);
      jimpImg.bitmap.width.should.eql(323);
    });
    it('should error with incorrect data type', async function () {
      await (0, _imageUtil.getJimpImage)(1234).should.eventually.be.rejectedWith(/string or buffer/);
    });
    it('should error with incorrect image data', async function () {
      await (0, _imageUtil.getJimpImage)('foo').should.eventually.be.rejectedWith(/Could not find MIME for Buffer/);
    });
    it('should get an image buffer via the overridden getBuffer method', async function () {
      const base64Image = await getImage('cropped-image.b64');
      const jimpImg = await (0, _imageUtil.getJimpImage)(base64Image);
      const buf = await jimpImg.getBuffer(_imageUtil.MIME_PNG);
      _lodash.default.isBuffer(buf).should.be.true;
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9pbWFnZS11dGlsLWUyZS1zcGVjcy5qcyIsIm5hbWVzIjpbIl9pbWFnZVV0aWwiLCJyZXF1aXJlIiwiX3BhdGgiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2xvZGFzaCIsIl9jaGFpIiwiXzIiLCJfY2hhaUFzUHJvbWlzZWQiLCJjaGFpIiwidXNlIiwiY2hhaUFzUHJvbWlzZWQiLCJzaG91bGQiLCJGSVhUVVJFU19ST09UIiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJnZXRJbWFnZSIsIm5hbWUiLCJpbWFnZVBhdGgiLCJmcyIsInJlYWRGaWxlIiwiZGVzY3JpYmUiLCJiZWZvcmUiLCJza2lwIiwib3JpZ2luYWxJbWFnZSIsIm9yaWdpbmFsSW1hZ2U2NCIsImJhc2U2NFRvSW1hZ2UiLCJ3aWR0aCIsImJlIiwiZXF1YWwiLCJoZWlnaHQiLCJpdCIsImNyb3BwZWRJbWFnZSIsImNyb3BJbWFnZSIsImxlZnQiLCJ0b3AiLCJjcm9wcGVkSW1hZ2VTaG91bGRCZSIsImNyb3BwZWRJbWFnZTY0IiwiaW1hZ2VUb0Jhc2U2NCIsInRpbWVvdXQiLCJpbWdGaXh0dXJlIiwiZnVsbEltYWdlIiwicGFydGlhbEltYWdlIiwiY2hhbmdlZEltYWdlIiwicm90YXRlZEltYWdlIiwibnVtYmVySW1hZ2UiLCJCdWZmZXIiLCJmcm9tIiwiZGV0ZWN0b3JOYW1lIiwiY291bnQiLCJ0b3RhbENvdW50IiwiZ2V0SW1hZ2VzTWF0Y2hlcyIsImFib3ZlIiwiZXFsIiwidmlzdWFsaXphdGlvbiIsInZpc3VhbGl6ZSIsIm5vdCIsImVtcHR5IiwicG9pbnRzMSIsInJlY3QxIiwicG9pbnRzMiIsInJlY3QyIiwibWF0Y2hGdW5jIiwiZ29vZE1hdGNoZXNGYWN0b3IiLCJsZW5ndGgiLCJ4IiwieSIsInNjb3JlIiwiZ2V0SW1hZ2VzU2ltaWxhcml0eSIsInJlY3QiLCJnZXRJbWFnZU9jY3VycmVuY2UiLCJ0aHJlc2hvbGQiLCJldmVudHVhbGx5IiwicmVqZWN0ZWRXaXRoIiwibXVsdGlwbGUiLCJlcSIsInJlc3VsdCIsImJhc2U2NEltYWdlIiwiaW1hZ2VCdWZmZXIiLCJqaW1wSW1nIiwiZ2V0SmltcEltYWdlIiwiaGFzaCIsImJpdG1hcCIsImJ1ZiIsImdldEJ1ZmZlciIsIk1JTUVfUE5HIiwiXyIsImlzQnVmZmVyIiwidHJ1ZSJdLCJzb3VyY2VSb290IjoiLi4vLi4iLCJzb3VyY2VzIjpbInRlc3QvaW1hZ2UtdXRpbC1lMmUtc3BlY3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYmFzZTY0VG9JbWFnZSwgaW1hZ2VUb0Jhc2U2NCwgY3JvcEltYWdlLFxuICBnZXRJbWFnZXNNYXRjaGVzLCBnZXRJbWFnZXNTaW1pbGFyaXR5LCBnZXRJbWFnZU9jY3VycmVuY2UsXG4gIGdldEppbXBJbWFnZSwgTUlNRV9QTkcsXG59IGZyb20gJy4uL2xpYi9pbWFnZS11dGlsJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IHsgZnMgfSBmcm9tICcuLic7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5cbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcbmNoYWkuc2hvdWxkKCk7XG5cbmNvbnN0IEZJWFRVUkVTX1JPT1QgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAndGVzdCcsICdpbWFnZXMnKTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0SW1hZ2UgKG5hbWUpIHtcbiAgY29uc3QgaW1hZ2VQYXRoID0gcGF0aC5yZXNvbHZlKEZJWFRVUkVTX1JPT1QsIG5hbWUpO1xuICByZXR1cm4gYXdhaXQgZnMucmVhZEZpbGUoaW1hZ2VQYXRoLCAndXRmOCcpO1xufVxuXG5kZXNjcmliZSgnaW1hZ2UtdXRpbCcsIGZ1bmN0aW9uICgpIHtcbiAgYmVmb3JlKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBUT0RPOiByZW1vdmUgd2hlbiBvcGVuY3Y0bm9kZWpzIGlzIGZpeGVkXG4gICAgcmV0dXJuIHRoaXMuc2tpcCgpO1xuICB9KTtcblxuICBkZXNjcmliZSgnY3JvcEJhc2U2NEltYWdlJywgZnVuY3Rpb24gKCkge1xuICAgIGxldCBvcmlnaW5hbEltYWdlID0gbnVsbDtcblxuICAgIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBvcmlnaW5hbEltYWdlNjQgPSBhd2FpdCBnZXRJbWFnZSgnZnVsbC1pbWFnZS5iNjQnKTtcbiAgICAgIG9yaWdpbmFsSW1hZ2UgPSBhd2FpdCBiYXNlNjRUb0ltYWdlKG9yaWdpbmFsSW1hZ2U2NCk7XG5cbiAgICAgIC8vIHZlcmlmeSBvcmlnaW5hbCBpbWFnZSBzaXplLCB0byBiZSBzdXJlIHRoYXQgb3JpZ2luYWwgaW1hZ2UgaXMgY29ycmVjdFxuICAgICAgb3JpZ2luYWxJbWFnZS53aWR0aC5zaG91bGQuYmUuZXF1YWwoNjQwLCAndW5leHBlY3RlZCB3aWR0aCcpO1xuICAgICAgb3JpZ2luYWxJbWFnZS5oZWlnaHQuc2hvdWxkLmJlLmVxdWFsKDExMzYsICd1bmV4cGVjdGVkIGhlaWdodCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB2ZXJpZnkgdGhhdCBhbiBpbWFnZSBpcyBjcm9wcGVkIGNvcnJlY3RseScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGNyb3BwZWRJbWFnZSA9IGF3YWl0IGNyb3BJbWFnZShvcmlnaW5hbEltYWdlLCB7bGVmdDogMzUsIHRvcDogMTA3LCB3aWR0aDogMzIzLCBoZWlnaHQ6IDQ4NX0pO1xuXG4gICAgICAvLyB2ZXJpZnkgY3JvcHBlZCBpbWFnZSBzaXplLCBpdCBzaG91bGQgYmUgbGVzcyB0aGFuIG9yaWdpbmFsIGltYWdlIGFjY29yZGluZyB0byBjcm9wIHJlZ2lvblxuICAgICAgY3JvcHBlZEltYWdlLndpZHRoLnNob3VsZC5iZS5lcXVhbCgzMjMsICd1bmV4cGVjdGVkIHdpZHRoJyk7XG4gICAgICBjcm9wcGVkSW1hZ2UuaGVpZ2h0LnNob3VsZC5iZS5lcXVhbCg0ODUsICd1bmV4cGVjdGVkIGhlaWdodCcpO1xuXG4gICAgICAvLyB2ZXJpZnkgdGhhdCBpbWFnZSBjcm9wcGVkLCBjb21wYXJlIGJhc2U2NCByZXByZXNlbnRhdGlvblxuICAgICAgY29uc3QgY3JvcHBlZEltYWdlU2hvdWxkQmUgPSBhd2FpdCBnZXRJbWFnZSgnY3JvcHBlZC1pbWFnZS5iNjQnKTtcbiAgICAgIGNvbnN0IGNyb3BwZWRJbWFnZTY0ID0gYXdhaXQgaW1hZ2VUb0Jhc2U2NChjcm9wcGVkSW1hZ2UpO1xuICAgICAgY3JvcHBlZEltYWdlNjQuc2hvdWxkLmJlLmVxdWFsKGNyb3BwZWRJbWFnZVNob3VsZEJlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ09wZW5DViBoZWxwZXJzJywgZnVuY3Rpb24gKCkge1xuICAgIC8vIE9wZW5DViBuZWVkcyBzZXZlcmFsIHNlY29uZHMgZm9yIGluaXRpYWxpemF0aW9uXG4gICAgdGhpcy50aW1lb3V0KDEyMDAwMCk7XG5cbiAgICBsZXQgaW1nRml4dHVyZSA9IG51bGw7XG4gICAgbGV0IGZ1bGxJbWFnZSA9IG51bGw7XG4gICAgbGV0IHBhcnRpYWxJbWFnZSA9IG51bGw7XG4gICAgbGV0IG9yaWdpbmFsSW1hZ2UgPSBudWxsO1xuICAgIGxldCBjaGFuZ2VkSW1hZ2UgPSBudWxsO1xuICAgIGxldCByb3RhdGVkSW1hZ2UgPSBudWxsO1xuICAgIGxldCBudW1iZXJJbWFnZSA9IG51bGw7XG5cbiAgICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgaW1hZ2VQYXRoID0gcGF0aC5yZXNvbHZlKEZJWFRVUkVTX1JPT1QsICdmdWxsLWltYWdlLmI2NCcpO1xuICAgICAgaW1nRml4dHVyZSA9IEJ1ZmZlci5mcm9tKGF3YWl0IGZzLnJlYWRGaWxlKGltYWdlUGF0aCwgJ2JpbmFyeScpLCAnYmFzZTY0Jyk7XG4gICAgICBmdWxsSW1hZ2UgPSBhd2FpdCBmcy5yZWFkRmlsZShwYXRoLnJlc29sdmUoRklYVFVSRVNfUk9PVCwgJ2ZpbmR3YWxkby5qcGcnKSk7XG4gICAgICBwYXJ0aWFsSW1hZ2UgPSBhd2FpdCBmcy5yZWFkRmlsZShwYXRoLnJlc29sdmUoRklYVFVSRVNfUk9PVCwgJ3dhbGRvLmpwZycpKTtcbiAgICAgIG9yaWdpbmFsSW1hZ2UgPSBhd2FpdCBmcy5yZWFkRmlsZShwYXRoLnJlc29sdmUoRklYVFVSRVNfUk9PVCwgJ2NjMS5wbmcnKSk7XG4gICAgICBjaGFuZ2VkSW1hZ2UgPSBhd2FpdCBmcy5yZWFkRmlsZShwYXRoLnJlc29sdmUoRklYVFVSRVNfUk9PVCwgJ2NjMi5wbmcnKSk7XG4gICAgICBudW1iZXJJbWFnZSA9IGF3YWl0IGZzLnJlYWRGaWxlKHBhdGgucmVzb2x2ZShGSVhUVVJFU19ST09ULCAnbnVtYmVyNS5wbmcnKSk7XG4gICAgICByb3RhdGVkSW1hZ2UgPSBhd2FpdCBmcy5yZWFkRmlsZShwYXRoLnJlc29sdmUoRklYVFVSRVNfUk9PVCwgJ2NjX3JvdGF0ZWQucG5nJykpO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2dldEltYWdlc01hdGNoZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSB0aGUgbnVtYmVyIG9mIG1hdGNoZXMgYmV0d2VlbiB0d28gaW1hZ2VzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGRldGVjdG9yTmFtZSBvZiBbJ0FLQVpFJywgJ09SQiddKSB7XG4gICAgICAgICAgY29uc3Qge2NvdW50LCB0b3RhbENvdW50fSA9IGF3YWl0IGdldEltYWdlc01hdGNoZXMoZnVsbEltYWdlLCBmdWxsSW1hZ2UsIHtkZXRlY3Rvck5hbWV9KTtcbiAgICAgICAgICBjb3VudC5zaG91bGQuYmUuYWJvdmUoMCk7XG4gICAgICAgICAgdG90YWxDb3VudC5zaG91bGQuZXFsKGNvdW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgdmlzdWFsaXplIG1hdGNoZXMgYmV0d2VlbiB0d28gaW1hZ2VzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCB7dmlzdWFsaXphdGlvbn0gPSBhd2FpdCBnZXRJbWFnZXNNYXRjaGVzKGZ1bGxJbWFnZSwgZnVsbEltYWdlLCB7dmlzdWFsaXplOiB0cnVlfSk7XG4gICAgICAgIHZpc3VhbGl6YXRpb24uc2hvdWxkLm5vdC5iZS5lbXB0eTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHZpc3VhbGl6ZSBtYXRjaGVzIGJldHdlZW4gdHdvIGltYWdlcyBhbmQgYXBwbHkgZ29vZE1hdGNoZXNGYWN0b3InLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHt2aXN1YWxpemF0aW9uLCBwb2ludHMxLCByZWN0MSwgcG9pbnRzMiwgcmVjdDJ9ID0gYXdhaXQgZ2V0SW1hZ2VzTWF0Y2hlcyhyb3RhdGVkSW1hZ2UsIG9yaWdpbmFsSW1hZ2UsIHtcbiAgICAgICAgICB2aXN1YWxpemU6IHRydWUsXG4gICAgICAgICAgbWF0Y2hGdW5jOiAnQnJ1dGVGb3JjZUhhbW1pbmcnLFxuICAgICAgICAgIGdvb2RNYXRjaGVzRmFjdG9yOiA0MFxuICAgICAgICB9KTtcbiAgICAgICAgdmlzdWFsaXphdGlvbi5zaG91bGQubm90LmJlLmVtcHR5O1xuICAgICAgICBwb2ludHMxLmxlbmd0aC5zaG91bGQuYmUuYWJvdmUoNCk7XG4gICAgICAgIHJlY3QxLnguc2hvdWxkLmJlLmFib3ZlKDApO1xuICAgICAgICByZWN0MS55LnNob3VsZC5iZS5hYm92ZSgwKTtcbiAgICAgICAgcmVjdDEud2lkdGguc2hvdWxkLmJlLmFib3ZlKDApO1xuICAgICAgICByZWN0MS5oZWlnaHQuc2hvdWxkLmJlLmFib3ZlKDApO1xuICAgICAgICBwb2ludHMyLmxlbmd0aC5zaG91bGQuYmUuYWJvdmUoNCk7XG4gICAgICAgIHJlY3QyLnguc2hvdWxkLmJlLmFib3ZlKDApO1xuICAgICAgICByZWN0Mi55LnNob3VsZC5iZS5hYm92ZSgwKTtcbiAgICAgICAgcmVjdDIud2lkdGguc2hvdWxkLmJlLmFib3ZlKDApO1xuICAgICAgICByZWN0Mi5oZWlnaHQuc2hvdWxkLmJlLmFib3ZlKDApO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnZ2V0SW1hZ2VzU2ltaWxhcml0eScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIHRoZSBzaW1pbGFyaXR5IHNjb3JlIGJldHdlZW4gdHdvIGltYWdlcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qge3Njb3JlfSA9IGF3YWl0IGdldEltYWdlc1NpbWlsYXJpdHkoaW1nRml4dHVyZSwgaW1nRml4dHVyZSk7XG4gICAgICAgIHNjb3JlLnNob3VsZC5iZS5hYm92ZSgwKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHZpc3VhbGl6ZSB0aGUgc2ltaWxhcml0eSBiZXR3ZWVuIHR3byBpbWFnZXMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHt2aXN1YWxpemF0aW9ufSA9IGF3YWl0IGdldEltYWdlc1NpbWlsYXJpdHkob3JpZ2luYWxJbWFnZSwgY2hhbmdlZEltYWdlLCB7dmlzdWFsaXplOiB0cnVlfSk7XG4gICAgICAgIHZpc3VhbGl6YXRpb24uc2hvdWxkLm5vdC5iZS5lbXB0eTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2dldEltYWdlT2NjdXJyZW5jZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIHRoZSBwYXJ0aWFsIGltYWdlIHBvc2l0aW9uIGluIHRoZSBmdWxsIGltYWdlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCB7cmVjdCwgc2NvcmV9ID0gYXdhaXQgZ2V0SW1hZ2VPY2N1cnJlbmNlKGZ1bGxJbWFnZSwgcGFydGlhbEltYWdlKTtcbiAgICAgICAgcmVjdC54LnNob3VsZC5iZS5hYm92ZSgwKTtcbiAgICAgICAgcmVjdC55LnNob3VsZC5iZS5hYm92ZSgwKTtcbiAgICAgICAgcmVjdC53aWR0aC5zaG91bGQuYmUuYWJvdmUoMCk7XG4gICAgICAgIHJlY3QuaGVpZ2h0LnNob3VsZC5iZS5hYm92ZSgwKTtcbiAgICAgICAgc2NvcmUuc2hvdWxkLmJlLmFib3ZlKDApO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgcmVqZWN0IG1hdGNoZXMgdGhhdCBmYWxsIGJlbG93IGEgdGhyZXNob2xkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBnZXRJbWFnZU9jY3VycmVuY2UoZnVsbEltYWdlLCBwYXJ0aWFsSW1hZ2UsIHt0aHJlc2hvbGQ6IDEuMH0pXG4gICAgICAgICAgLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvdGhyZXNob2xkLyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCB2aXN1YWxpemUgdGhlIHBhcnRpYWwgaW1hZ2UgcG9zaXRpb24gaW4gdGhlIGZ1bGwgaW1hZ2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHt2aXN1YWxpemF0aW9ufSA9IGF3YWl0IGdldEltYWdlT2NjdXJyZW5jZShmdWxsSW1hZ2UsIHBhcnRpYWxJbWFnZSwge3Zpc3VhbGl6ZTogdHJ1ZX0pO1xuICAgICAgICB2aXN1YWxpemF0aW9uLnNob3VsZC5ub3QuYmUuZW1wdHk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ211bHRpcGxlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBtYXRjaGVzIGluIHRoZSBmdWxsIGltYWdlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnN0IHsgbXVsdGlwbGUgfSA9IGF3YWl0IGdldEltYWdlT2NjdXJyZW5jZShvcmlnaW5hbEltYWdlLCBudW1iZXJJbWFnZSwge3RocmVzaG9sZDogMC44LCBtdWx0aXBsZTogdHJ1ZX0pO1xuICAgICAgICAgIG11bHRpcGxlLmxlbmd0aC5zaG91bGQuYmUuZXEoMyk7XG5cbiAgICAgICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiBtdWx0aXBsZSkge1xuICAgICAgICAgICAgcmVzdWx0LnJlY3QueC5zaG91bGQuYmUuYWJvdmUoMCk7XG4gICAgICAgICAgICByZXN1bHQucmVjdC55LnNob3VsZC5iZS5hYm92ZSgwKTtcbiAgICAgICAgICAgIHJlc3VsdC5yZWN0LndpZHRoLnNob3VsZC5iZS5hYm92ZSgwKTtcbiAgICAgICAgICAgIHJlc3VsdC5yZWN0LmhlaWdodC5zaG91bGQuYmUuYWJvdmUoMCk7XG4gICAgICAgICAgICByZXN1bHQuc2NvcmUuc2hvdWxkLmJlLmFib3ZlKDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCByZWplY3QgbWF0Y2hlcyB0aGF0IGZhbGwgYmVsb3cgYSB0aHJlc2hvbGQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYXdhaXQgZ2V0SW1hZ2VPY2N1cnJlbmNlKG9yaWdpbmFsSW1hZ2UsIG51bWJlckltYWdlLCB7dGhyZXNob2xkOiAxLjAsIG11bHRpcGxlOiB0cnVlfSlcbiAgICAgICAgICAgIC5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoL3RocmVzaG9sZC8pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHZpc3VhbGl6ZSB0aGUgcGFydGlhbCBpbWFnZSBwb3NpdGlvbiBpbiB0aGUgZnVsbCBpbWFnZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb25zdCB7IG11bHRpcGxlIH0gPSBhd2FpdCBnZXRJbWFnZU9jY3VycmVuY2Uob3JpZ2luYWxJbWFnZSwgbnVtYmVySW1hZ2UsIHt2aXN1YWxpemU6IHRydWUsIG11bHRpcGxlOiB0cnVlfSk7XG5cbiAgICAgICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiBtdWx0aXBsZSkge1xuICAgICAgICAgICAgcmVzdWx0LnZpc3VhbGl6YXRpb24uc2hvdWxkLm5vdC5iZS5lbXB0eTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdKaW1wIGhlbHBlcnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBnZXQgYSBqaW1wIG9iamVjdCB1c2luZyBpbWFnZSBidWZmZXInLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBiYXNlNjRJbWFnZSA9IGF3YWl0IGdldEltYWdlKCdjcm9wcGVkLWltYWdlLmI2NCcpO1xuICAgICAgY29uc3QgaW1hZ2VCdWZmZXIgPSBCdWZmZXIuZnJvbShiYXNlNjRJbWFnZSwgJ2Jhc2U2NCcpO1xuICAgICAgY29uc3QgamltcEltZyA9IGF3YWl0IGdldEppbXBJbWFnZShpbWFnZUJ1ZmZlcik7XG4gICAgICBqaW1wSW1nLmhhc2goKS5zaG91bGQuZXFsKCc4MDAwMDAwMDAwMCcpO1xuICAgICAgamltcEltZy5iaXRtYXAuaGVpZ2h0LnNob3VsZC5lcWwoNDg1KTtcbiAgICAgIGppbXBJbWcuYml0bWFwLndpZHRoLnNob3VsZC5lcWwoMzIzKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGdldCBhIGppbXAgb2JqZWN0IHVzaW5nIGI2NCBzdHJpbmcnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBiYXNlNjRJbWFnZSA9IGF3YWl0IGdldEltYWdlKCdjcm9wcGVkLWltYWdlLmI2NCcpO1xuICAgICAgY29uc3QgamltcEltZyA9IGF3YWl0IGdldEppbXBJbWFnZShiYXNlNjRJbWFnZSk7XG4gICAgICBqaW1wSW1nLmhhc2goKS5zaG91bGQuZXFsKCc4MDAwMDAwMDAwMCcpO1xuICAgICAgamltcEltZy5iaXRtYXAuaGVpZ2h0LnNob3VsZC5lcWwoNDg1KTtcbiAgICAgIGppbXBJbWcuYml0bWFwLndpZHRoLnNob3VsZC5lcWwoMzIzKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGVycm9yIHdpdGggaW5jb3JyZWN0IGRhdGEgdHlwZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGdldEppbXBJbWFnZSgxMjM0KS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoL3N0cmluZyBvciBidWZmZXIvKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGVycm9yIHdpdGggaW5jb3JyZWN0IGltYWdlIGRhdGEnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBnZXRKaW1wSW1hZ2UoJ2ZvbycpLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvQ291bGQgbm90IGZpbmQgTUlNRSBmb3IgQnVmZmVyLyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBnZXQgYW4gaW1hZ2UgYnVmZmVyIHZpYSB0aGUgb3ZlcnJpZGRlbiBnZXRCdWZmZXIgbWV0aG9kJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgYmFzZTY0SW1hZ2UgPSBhd2FpdCBnZXRJbWFnZSgnY3JvcHBlZC1pbWFnZS5iNjQnKTtcbiAgICAgIGNvbnN0IGppbXBJbWcgPSBhd2FpdCBnZXRKaW1wSW1hZ2UoYmFzZTY0SW1hZ2UpO1xuICAgICAgY29uc3QgYnVmID0gYXdhaXQgamltcEltZy5nZXRCdWZmZXIoTUlNRV9QTkcpO1xuICAgICAgXy5pc0J1ZmZlcihidWYpLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBQUEsVUFBQSxHQUFBQyxPQUFBO0FBS0EsSUFBQUMsS0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBRCxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUksS0FBQSxHQUFBRixzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUssRUFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sZUFBQSxHQUFBSixzQkFBQSxDQUFBRixPQUFBO0FBRUFPLGFBQUks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
