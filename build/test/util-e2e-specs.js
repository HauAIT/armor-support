"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _chai = _interopRequireDefault(require("chai"));
var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));
var _path = _interopRequireDefault(require("path"));
var util = _interopRequireWildcard(require("../lib/util"));
var _index = require("../index");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
_chai.default.should();
_chai.default.use(_chaiAsPromised.default);
describe('#util', function () {
  let tmpRoot;
  let tmpFile;
  const content = 'YOLO';
  beforeEach(async function () {
    tmpRoot = await _index.tempDir.openDir();
    tmpFile = _path.default.resolve(tmpRoot, 'example.txt');
    await _index.fs.writeFile(tmpFile, content, 'utf8');
  });
  afterEach(async function () {
    if (tmpRoot) {
      await _index.fs.rimraf(tmpRoot);
    }
    tmpRoot = null;
  });
  describe('toInMemoryBase64()', function () {
    it('should convert a file to base64 encoding', async function () {
      const data = await util.toInMemoryBase64(tmpFile);
      const fileContent = await _index.fs.readFile(tmpFile);
      data.toString().should.eql(fileContent.toString('base64'));
    });
  });
  describe('getLockFileGuard()', function () {
    let tmpRoot;
    let lockFile;
    let testFile;
    async function guardedBehavior(text, msBeforeActing) {
      await _bluebird.default.delay(msBeforeActing);
      await _index.fs.appendFile(testFile, text, 'utf8');
      return text;
    }
    async function testFileContents() {
      return (await _index.fs.readFile(testFile)).toString('utf8');
    }
    beforeEach(async function () {
      tmpRoot = await _index.tempDir.openDir();
      lockFile = _path.default.resolve(tmpRoot, 'test.lock');
      testFile = _path.default.resolve(tmpRoot, 'test');
      await _index.fs.writeFile(testFile, 'a', 'utf8');
    });
    afterEach(async function () {
      try {
        await _bluebird.default.all([lockFile, testFile].map(p => _index.fs.unlink(p)));
      } catch (ign) {}
    });
    it('should lock a file during the given behavior', async function () {
      const guard = util.getLockFileGuard(lockFile);
      await guard.check().should.eventually.be.false;
      const guardPromise = guard(async () => await guardedBehavior('b', 500));
      await _bluebird.default.delay(200);
      await guard.check().should.eventually.be.true;
      await guardPromise;
      await guard.check().should.eventually.be.false;
      await testFileContents().should.eventually.eql('ab');
    });
    it('should recover a broken lock file', async function () {
      await _index.fs.writeFile(lockFile, 'dummy', 'utf8');
      const guard = util.getLockFileGuard(lockFile, {
        timeout: 3,
        tryRecovery: true
      });
      await guard(async () => await guardedBehavior('b', 500));
      await guard.check().should.eventually.be.false;
      await testFileContents().should.eventually.eql('ab');
    });
    it('should block other behavior until the lock is released', async function () {
      await testFileContents().should.eventually.eql('a');
      const unguardedPromise1 = guardedBehavior('b', 500);
      const unguardedPromise2 = guardedBehavior('c', 100);
      await unguardedPromise1;
      await unguardedPromise2;
      await testFileContents().should.eventually.eql('acb');
      const guard = util.getLockFileGuard(lockFile);
      const guardPromise1 = guard(async () => await guardedBehavior('b', 500));
      const guardPromise2 = guard(async () => await guardedBehavior('c', 100));
      await guardPromise1;
      await guardPromise2;
      await testFileContents().should.eventually.eql('acbbc');
    });
    it('should return the result of the guarded behavior', async function () {
      const guard = util.getLockFileGuard(lockFile);
      const guardPromise1 = guard(async () => await guardedBehavior('hello', 500));
      const guardPromise2 = guard(async () => await guardedBehavior('world', 100));
      const ret1 = await guardPromise1;
      const ret2 = await guardPromise2;
      ret1.should.eql('hello');
      ret2.should.eql('world');
    });
    it('should time out if the lock is not released', async function () {
      this.timeout(5000);
      const guard = util.getLockFileGuard(lockFile, {
        timeout: 0.5
      });
      const p1 = guard(async () => await guardedBehavior('hello', 1200));
      const p2 = guard(async () => await guardedBehavior('world', 10));
      await p2.should.eventually.be.rejectedWith(/not acquire lock/);
      await p1.should.eventually.eql('hello');
    });
    it('should still release lock if guarded behavior fails', async function () {
      this.timeout(5000);
      const guard = util.getLockFileGuard(lockFile);
      const p1 = guard(async () => {
        await _bluebird.default.delay(500);
        throw new Error('bad');
      });
      const p2 = guard(async () => await guardedBehavior('world', 100));
      await p1.should.eventually.be.rejectedWith(/bad/);
      await p2.should.eventually.eql('world');
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
