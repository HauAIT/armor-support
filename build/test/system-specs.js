"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
var _index = require("../index.js");
var _chai = _interopRequireDefault(require("chai"));
var _os = _interopRequireDefault(require("os"));
var _sinon = _interopRequireDefault(require("sinon"));
var ait_process = _interopRequireWildcard(require("ait-process"));
var _lodash = _interopRequireDefault(require("lodash"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
_chai.default.should();
let sandbox,
  tpMock,
  osMock = null;
let SANDBOX = Symbol();
let mocks = {};
let libs = {
  ait_process,
  os: _os.default,
  system: _index.system
};
describe('system', function () {
  describe('isX functions', function () {
    beforeEach(function () {
      osMock = _sinon.default.mock(_os.default);
    });
    afterEach(function () {
      osMock.verify();
    });
    it('should correctly return Windows System if it is a Windows', function () {
      osMock.expects('type').returns('Windows_NT');
      _index.system.isWindows().should.be.true;
    });
    it('should correctly return Mac if it is a Mac', function () {
      osMock.expects('type').returns('Darwin');
      _index.system.isMac().should.be.true;
    });
    it('should correctly return Linux if it is a Linux', function () {
      osMock.expects('type').twice().returns('Linux');
      _index.system.isLinux().should.be.true;
    });
  });
  describe('mac OSX version', function () {
    beforeEach(function () {
      tpMock = _sinon.default.mock(ait_process);
    });
    afterEach(function () {
      tpMock.verify();
    });
    it('should return correct version for 10.10.5', async function () {
      tpMock.expects('exec').once().withExactArgs('sw_vers', ['-productVersion']).returns({
        stdout: '10.10.5'
      });
      await _index.system.macOsxVersion().should.eventually.equal('10.10');
    });
    it('should return correct version for 10.12', async function () {
      tpMock.expects('exec').once().withExactArgs('sw_vers', ['-productVersion']).returns({
        stdout: '10.12.0'
      });
      await _index.system.macOsxVersion().should.eventually.equal('10.12');
    });
    it('should return correct version for 10.12 with newline', async function () {
      tpMock.expects('exec').once().withExactArgs('sw_vers', ['-productVersion']).returns({
        stdout: '10.12   \n'
      });
      await _index.system.macOsxVersion().should.eventually.equal('10.12');
    });
    it("should throw an error if OSX version can't be determined", async function () {
      let invalidOsx = 'error getting operation system version blabla';
      tpMock.expects('exec').once().withExactArgs('sw_vers', ['-productVersion']).returns({
        stdout: invalidOsx
      });
      await _index.system.macOsxVersion().should.eventually.be.rejectedWith(new RegExp(_lodash.default.escapeRegExp(invalidOsx)));
    });
  });
  describe('architecture', function () {
    beforeEach(function () {
      sandbox = _sinon.default.createSandbox();
      mocks[SANDBOX] = sandbox;
      for (let [key, value] of _lodash.default.toPairs(libs)) {
        mocks[key] = sandbox.mock(value);
      }
    });
    afterEach(function () {
      sandbox.restore();
    });
    it('should return correct architecture if it is a 64 bit Mac/Linux', async function () {
      mocks.os.expects('type').thrice().returns('Darwin');
      mocks.ait_process.expects('exec').once().withExactArgs('uname', ['-m']).returns({
        stdout: 'x86_64'
      });
      let arch = await _index.system.arch();
      arch.should.equal('64');
      mocks[SANDBOX].verify();
    });
    it('should return correct architecture if it is a 32 bit Mac/Linux', async function () {
      mocks.os.expects('type').twice().returns('Linux');
      mocks.ait_process.expects('exec').once().withExactArgs('uname', ['-m']).returns({
        stdout: 'i686'
      });
      let arch = await _index.system.arch();
      arch.should.equal('32');
      mocks[SANDBOX].verify();
    });
    it('should return correct architecture if it is a 64 bit Windows', async function () {
      mocks.os.expects('type').thrice().returns('Windows_NT');
      mocks.system.expects('isOSWin64').once().returns(true);
      let arch = await _index.system.arch();
      arch.should.equal('64');
      mocks[SANDBOX].verify();
    });
    it('should return correct architecture if it is a 32 bit Windows', async function () {
      mocks.os.expects('type').thrice().returns('Windows_NT');
      mocks.system.expects('isOSWin64').once().returns(false);
      let arch = await _index.system.arch();
      arch.should.equal('32');
      mocks[SANDBOX].verify();
    });
  });
  it('should know architecture', function () {
    return _index.system.arch();
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
