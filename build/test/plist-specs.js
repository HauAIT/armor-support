"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
var _chai = _interopRequireDefault(require("chai"));
var _path = _interopRequireDefault(require("path"));
var _index = require("../index.js");
_chai.default.should();
const binaryPlistPath = _path.default.resolve('test', 'assets', 'sample_binary.plist');
const textPlistPath = _path.default.resolve('test', 'assets', 'sample_text.plist');
describe('plist', function () {
  it('should parse plist file as binary', async function () {
    let content = await _index.plist.parsePlistFile(binaryPlistPath);
    content.should.have.property('com.apple.locationd.bundle-/System/Library/PrivateFrameworks/Parsec.framework');
  });
  it(`should return an empty object if file doesn't exist and mustExist is set to false`, async function () {
    let mustExist = false;
    let content = await _index.plist.parsePlistFile('doesntExist.plist', mustExist);
    content.should.be.an('object');
    content.should.be.empty;
  });
  it('should write plist file as binary', async function () {
    let plistFile = _path.default.resolve(await _index.tempDir.openDir(), 'sample.plist');
    await _index.fs.copyFile(binaryPlistPath, plistFile);
    let updatedFields = {
      'io.armor.test': true
    };
    await _index.plist.updatePlistFile(plistFile, updatedFields, true);
    let content = await _index.plist.parsePlistFile(plistFile);
    content.should.have.property('io.armor.test');
  });
  it('should read binary plist', async function () {
    const content = await _index.fs.readFile(binaryPlistPath);
    const object = _index.plist.parsePlist(content);
    object.should.have.property('com.apple.locationd.bundle-/System/Library/PrivateFrameworks/Parsec.framework');
  });
  it('should read text plist', async function () {
    const content = await _index.fs.readFile(textPlistPath);
    const object = _index.plist.parsePlist(content);
    object.should.have.property('com.apple.locationd.bundle-/System/Library/PrivateFrameworks/Parsec.framework');
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9wbGlzdC1zcGVjcy5qcyIsIm5hbWVzIjpbIl9jaGFpIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcGF0aCIsIl9pbmRleCIsImNoYWkiLCJzaG91bGQiLCJiaW5hcnlQbGlzdFBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsInRleHRQbGlzdFBhdGgiLCJkZXNjcmliZSIsIml0IiwiY29udGVudCIsInBsaXN0IiwicGFyc2VQbGlzdEZpbGUiLCJoYXZlIiwicHJvcGVydHkiLCJtdXN0RXhpc3QiLCJiZSIsImFuIiwiZW1wdHkiLCJwbGlzdEZpbGUiLCJ0ZW1wRGlyIiwib3BlbkRpciIsImZzIiwiY29weUZpbGUiLCJ1cGRhdGVkRmllbGRzIiwidXBkYXRlUGxpc3RGaWxlIiwicmVhZEZpbGUiLCJvYmplY3QiLCJwYXJzZVBsaXN0Il0sInNvdXJjZVJvb3QiOiIuLi8uLiIsInNvdXJjZXMiOlsidGVzdC9wbGlzdC1zcGVjcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgcGxpc3QsIHRlbXBEaXIsIGZzIH0gZnJvbSAnLi4vaW5kZXguanMnO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5cbmNvbnN0IGJpbmFyeVBsaXN0UGF0aCA9IHBhdGgucmVzb2x2ZSgndGVzdCcsICdhc3NldHMnLCAnc2FtcGxlX2JpbmFyeS5wbGlzdCcpO1xuY29uc3QgdGV4dFBsaXN0UGF0aCA9IHBhdGgucmVzb2x2ZSgndGVzdCcsICdhc3NldHMnLCAnc2FtcGxlX3RleHQucGxpc3QnKTtcblxuZGVzY3JpYmUoJ3BsaXN0JywgZnVuY3Rpb24gKCkge1xuICBpdCgnc2hvdWxkIHBhcnNlIHBsaXN0IGZpbGUgYXMgYmluYXJ5JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGxldCBjb250ZW50ID0gYXdhaXQgcGxpc3QucGFyc2VQbGlzdEZpbGUoYmluYXJ5UGxpc3RQYXRoKTtcbiAgICBjb250ZW50LnNob3VsZC5oYXZlLnByb3BlcnR5KCdjb20uYXBwbGUubG9jYXRpb25kLmJ1bmRsZS0vU3lzdGVtL0xpYnJhcnkvUHJpdmF0ZUZyYW1ld29ya3MvUGFyc2VjLmZyYW1ld29yaycpO1xuICB9KTtcblxuICBpdChgc2hvdWxkIHJldHVybiBhbiBlbXB0eSBvYmplY3QgaWYgZmlsZSBkb2Vzbid0IGV4aXN0IGFuZCBtdXN0RXhpc3QgaXMgc2V0IHRvIGZhbHNlYCwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGxldCBtdXN0RXhpc3QgPSBmYWxzZTtcbiAgICBsZXQgY29udGVudCA9IGF3YWl0IHBsaXN0LnBhcnNlUGxpc3RGaWxlKCdkb2VzbnRFeGlzdC5wbGlzdCcsIG11c3RFeGlzdCk7XG4gICAgY29udGVudC5zaG91bGQuYmUuYW4oJ29iamVjdCcpO1xuICAgIGNvbnRlbnQuc2hvdWxkLmJlLmVtcHR5O1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHdyaXRlIHBsaXN0IGZpbGUgYXMgYmluYXJ5JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIC8vIGNyZWF0ZSBhIHRlbXBvcmFyeSBmaWxlLCB0byB3aGljaCB3ZSB3aWxsIHdyaXRlXG4gICAgbGV0IHBsaXN0RmlsZSA9IHBhdGgucmVzb2x2ZShhd2FpdCB0ZW1wRGlyLm9wZW5EaXIoKSwgJ3NhbXBsZS5wbGlzdCcpO1xuICAgIGF3YWl0IGZzLmNvcHlGaWxlKGJpbmFyeVBsaXN0UGF0aCwgcGxpc3RGaWxlKTtcblxuICAgIC8vIHdyaXRlIHNvbWUgZGF0YVxuICAgIGxldCB1cGRhdGVkRmllbGRzID0ge1xuICAgICAgJ2lvLmFybW9yLnRlc3QnOiB0cnVlXG4gICAgfTtcbiAgICBhd2FpdCBwbGlzdC51cGRhdGVQbGlzdEZpbGUocGxpc3RGaWxlLCB1cGRhdGVkRmllbGRzLCB0cnVlKTtcblxuICAgIC8vIG1ha2Ugc3VyZSB0aGUgZGF0YSBpcyB0aGVyZVxuICAgIGxldCBjb250ZW50ID0gYXdhaXQgcGxpc3QucGFyc2VQbGlzdEZpbGUocGxpc3RGaWxlKTtcbiAgICBjb250ZW50LnNob3VsZC5oYXZlLnByb3BlcnR5KCdpby5hcm1vci50ZXN0Jyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVhZCBiaW5hcnkgcGxpc3QnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgY29udGVudCA9IGF3YWl0IGZzLnJlYWRGaWxlKGJpbmFyeVBsaXN0UGF0aCk7XG4gICAgY29uc3Qgb2JqZWN0ID0gcGxpc3QucGFyc2VQbGlzdChjb250ZW50KTtcbiAgICBvYmplY3Quc2hvdWxkLmhhdmUucHJvcGVydHkoJ2NvbS5hcHBsZS5sb2NhdGlvbmQuYnVuZGxlLS9TeXN0ZW0vTGlicmFyeS9Qcml2YXRlRnJhbWV3b3Jrcy9QYXJzZWMuZnJhbWV3b3JrJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVhZCB0ZXh0IHBsaXN0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBmcy5yZWFkRmlsZSh0ZXh0UGxpc3RQYXRoKTtcbiAgICBjb25zdCBvYmplY3QgPSBwbGlzdC5wYXJzZVBsaXN0KGNvbnRlbnQpO1xuICAgIG9iamVjdC5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnY29tLmFwcGxlLmxvY2F0aW9uZC5idW5kbGUtL1N5c3RlbS9MaWJyYXJ5L1ByaXZhdGVGcmFtZXdvcmtzL1BhcnNlYy5mcmFtZXdvcmsnKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUYsT0FBQTtBQUdBRyxhQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDO0FBRWIsTUFBTUMsZUFBZSxHQUFHQyxhQUFJLENBQUNDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixDQUFDO0FBQzdFLE1BQU1DLGFBQWEsR0FBR0YsYUFBSSxDQUFDQyxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQztBQUV6RUUsUUFBUSxDQUFDLE9BQU8sRUFBRSxZQUFZO0VBQzVCQyxFQUFFLENBQUMsbUNBQW1DLEVBQUUsa0JBQWtCO0lBQ3hELElBQUlDLE9BQU8sR0FBRyxNQUFNQyxZQUFLLENBQUNDLGNBQWMsQ0FBQ1IsZUFBZSxDQUFDO0lBQ3pETSxPQUFPLENBQUNQLE1BQU0sQ0FBQ1UsSUFBSSxDQUFDQyxRQUFRLENBQUMsK0VBQStFLENBQUM7RUFDL0csQ0FBQyxDQUFDO0VBRUZMLEVBQUUsQ0FBRSxtRkFBa0YsRUFBRSxrQkFBa0I7SUFDeEcsSUFBSU0sU0FBUyxHQUFHLEtBQUs7SUFDckIsSUFBSUwsT0FBTyxHQUFHLE1BQU1DLFlBQUssQ0FBQ0MsY0FBYyxDQUFDLG1CQUFtQixFQUFFRyxTQUFTLENBQUM7SUFDeEVMLE9BQU8sQ0FBQ1AsTUFBTSxDQUFDYSxFQUFFLENBQUNDLEVBQUUsQ0FBQyxRQUFRLENBQUM7SUFDOUJQLE9BQU8sQ0FBQ1AsTUFBTSxDQUFDYSxFQUFFLENBQUNFLEtBQUs7RUFDekIsQ0FBQyxDQUFDO0VBRUZULEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRSxrQkFBa0I7SUFFeEQsSUFBSVUsU0FBUyxHQUFHZCxhQUFJLENBQUNDLE9BQU8sQ0FBQyxNQUFNYyxjQUFPLENBQUNDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsY0FBYyxDQUFDO0lBQ3JFLE1BQU1DLFNBQUUsQ0FBQ0MsUUFBUSxDQUFDbkIsZUFBZSxFQUFFZSxTQUFTLENBQUM7SUFHN0MsSUFBSUssYUFBYSxHQUFHO01BQ2xCLGVBQWUsRUFBRTtJQUNuQixDQUFDO0lBQ0QsTUFBTWIsWUFBSyxDQUFDYyxlQUFlLENBQUNOLFNBQVMsRUFBRUssYUFBYSxFQUFFLElBQUksQ0FBQztJQUczRCxJQUFJZCxPQUFPLEdBQUcsTUFBTUMsWUFBSyxDQUFDQyxjQUFjLENBQUNPLFNBQVMsQ0FBQztJQUNuRFQsT0FBTyxDQUFDUCxNQUFNLENBQUNVLElBQUksQ0FBQ0MsUUFBUSxDQUFDLGVBQWUsQ0FBQztFQUMvQyxDQUFDLENBQUM7RUFFRkwsRUFBRSxDQUFDLDBCQUEwQixFQUFFLGtCQUFrQjtJQUMvQyxNQUFNQyxPQUFPLEdBQUcsTUFBTVksU0FBRSxDQUFDSSxRQUFRLENBQUN0QixlQUFlLENBQUM7SUFDbEQsTUFBTXVCLE1BQU0sR0FBR2hCLFlBQUssQ0FBQ2lCLFVBQVUsQ0FBQ2xCLE9BQU8sQ0FBQztJQUN4Q2lCLE1BQU0sQ0FBQ3hCLE1BQU0sQ0FBQ1UsSUFBSSxDQUFDQyxRQUFRLENBQUMsK0VBQStFLENBQUM7RUFDOUcsQ0FBQyxDQUFDO0VBRUZMLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxrQkFBa0I7SUFDN0MsTUFBTUMsT0FBTyxHQUFHLE1BQU1ZLFNBQUUsQ0FBQ0ksUUFBUSxDQUFDbkIsYUFBYSxDQUFDO0lBQ2hELE1BQU1vQixNQUFNLEdBQUdoQixZQUFLLENBQUNpQixVQUFVLENBQUNsQixPQUFPLENBQUM7SUFDeENpQixNQUFNLENBQUN4QixNQUFNLENBQUNVLElBQUksQ0FBQ0MsUUFBUSxDQUFDLCtFQUErRSxDQUFDO0VBQzlHLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9
