"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _chai = _interopRequireDefault(require("chai"));
var _sinon = _interopRequireDefault(require("sinon"));
var _2 = require("..");
_chai.default.should();
const expect = _chai.default.expect;
describe('timing', function () {
  let processMock;
  afterEach(function () {
    processMock.verify();
  });
  describe('no bigint', function () {
    const bigintFn = process.hrtime.bigint;
    before(function () {
      if (_lodash.default.isFunction(bigintFn)) {
        delete process.hrtime.bigint;
      }
    });
    beforeEach(function () {
      processMock = _sinon.default.mock(process);
    });
    after(function () {
      if (_lodash.default.isFunction(bigintFn)) {
        process.hrtime.bigint = bigintFn;
      }
    });
    it('should get a start time as array', function () {
      const timer = new _2.timing.Timer().start();
      _lodash.default.isArray(timer.startTime).should.be.true;
    });
    it('should get a duration', function () {
      const timer = new _2.timing.Timer().start();
      const duration = timer.getDuration();
      _lodash.default.isNumber(duration.nanos).should.be.true;
    });
    it('should get correct seconds', function () {
      processMock.expects('hrtime').twice().onFirstCall().returns([12, 12345]).onSecondCall().returns([13, 54321]);
      const timer = new _2.timing.Timer().start();
      const duration = timer.getDuration();
      duration.asSeconds.should.eql(13.000054321);
    });
    it('should get correct milliseconds', function () {
      processMock.expects('hrtime').twice().onFirstCall().returns([12, 12345]).onSecondCall().returns([13, 54321]);
      const timer = new _2.timing.Timer().start();
      const duration = timer.getDuration();
      duration.asMilliSeconds.should.eql(13000.054321);
    });
    it('should get correct nanoseconds', function () {
      processMock.expects('hrtime').twice().onFirstCall().returns([12, 12345]).onSecondCall().returns([13, 54321]);
      const timer = new _2.timing.Timer().start();
      const duration = timer.getDuration();
      duration.asNanoSeconds.should.eql(13000054321);
    });
    it('should error if the timer was not started', function () {
      const timer = new _2.timing.Timer();
      expect(() => timer.getDuration()).to.throw('Unable to get duration');
    });
    it('should error if start time is a number', function () {
      const timer = new _2.timing.Timer();
      timer._startTime = 12345;
      expect(() => timer.getDuration()).to.throw('Unable to get duration');
    });
  });
  describe('bigint', function () {
    beforeEach(function () {
      if (!_lodash.default.isFunction(process.hrtime.bigint)) {
        return this.skip();
      }
      processMock = _sinon.default.mock(process.hrtime);
    });
    function setupMocks(once = false) {
      if (once) {
        processMock.expects('bigint').once().onFirstCall().returns(BigInt(1172941153404030));
      } else {
        processMock.expects('bigint').twice().onFirstCall().returns(BigInt(1172941153404030)).onSecondCall().returns(BigInt(1172951164887132));
      }
    }
    it('should get a duration', function () {
      setupMocks();
      const timer = new _2.timing.Timer().start();
      const duration = timer.getDuration();
      _lodash.default.isNumber(duration.nanos).should.be.true;
    });
    it('should get correct seconds', function () {
      setupMocks();
      const timer = new _2.timing.Timer().start();
      const duration = timer.getDuration();
      duration.asSeconds.should.be.eql(10.011483102);
    });
    it('should get correct milliseconds', function () {
      setupMocks();
      const timer = new _2.timing.Timer().start();
      const duration = timer.getDuration();
      duration.asMilliSeconds.should.be.eql(10011.483102);
    });
    it('should get correct nanoseconds', function () {
      setupMocks();
      const timer = new _2.timing.Timer().start();
      const duration = timer.getDuration();
      duration.asNanoSeconds.should.be.eql(10011483102);
    });
    it('should error if the timer was not started', function () {
      const timer = new _2.timing.Timer();
      expect(() => timer.getDuration()).to.throw('Unable to get duration');
    });
    it('should error if passing in a non-bigint', function () {
      const timer = new _2.timing.Timer();
      timer._startTime = 12345;
      expect(() => timer.getDuration()).to.throw('Unable to get duration');
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
