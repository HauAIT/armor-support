"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
var _chai = _interopRequireDefault(require("chai"));
var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));
var AITProcess = _interopRequireWildcard(require("ait-process"));
var _sinon = _interopRequireDefault(require("sinon"));
var _index = require("../index.js");
var _aitAsync = require("ait-async");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
_chai.default.should();
_chai.default.use(_chaiAsPromised.default);
const SubProcess = AITProcess.SubProcess;
describe('process', function () {
  describe('getProcessIds', function () {
    let proc;
    before(async function () {
      proc = new SubProcess('tail', ['-f', __filename]);
      await proc.start();
    });
    after(async function () {
      await proc.stop();
    });
    it('should get return an array for existing process', async function () {
      let pids = await _index.process.getProcessIds('tail');
      pids.should.be.an.instanceof(Array);
    });
    it('should get process identifiers for existing process', async function () {
      let pids = await _index.process.getProcessIds('tail');
      pids.should.have.length.at.least(1);
    });
    it('should get an empty array when the process does not exist', async function () {
      let pids = await _index.process.getProcessIds('sadfgasdfasdf');
      pids.should.have.length(0);
    });
    it('should throw an error if pgrep fails', async function () {
      let tpMock = _sinon.default.mock(AITProcess);
      tpMock.expects('exec').throws({
        message: 'Oops',
        code: 2
      });
      await _index.process.getProcessIds('tail').should.eventually.be.rejectedWith(/Oops/);
      tpMock.restore();
    });
  });
  describe('killProcess', function () {
    let proc;
    beforeEach(async function () {
      proc = new SubProcess('tail', ['-f', __filename]);
      await proc.start();
    });
    afterEach(async function () {
      if (proc.isRunning) {
        await proc.stop();
      }
    });
    it('should kill process that is running', async function () {
      proc.isRunning.should.be.true;
      await _index.process.killProcess('tail');
      await (0, _aitAsync.retryInterval)(10, 100, async () => {
        proc.isRunning.should.be.false;
      });
    });
    it('should do nothing if the process does not exist', async function () {
      proc.isRunning.should.be.true;
      await _index.process.killProcess('asdfasdfasdf');
      await (0, _aitAsync.retryInterval)(10, 100, async () => {
        proc.isRunning.should.be.false;
      }).should.eventually.be.rejected;
    });
    it('should throw an error if pgrep fails', async function () {
      let tpMock = _sinon.default.mock(AITProcess);
      tpMock.expects('exec').throws({
        message: 'Oops',
        code: 2
      });
      await _index.process.killProcess('tail').should.eventually.be.rejectedWith(/Oops/);
      tpMock.restore();
    });
    it('should throw an error if pkill fails', async function () {
      let tpMock = _sinon.default.mock(AITProcess);
      tpMock.expects('exec').twice().onFirstCall().returns({
        stdout: '42\n'
      }).onSecondCall().throws({
        message: 'Oops',
        code: 2
      });
      await _index.process.killProcess('tail').should.eventually.be.rejectedWith(/Oops/);
      tpMock.restore();
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
