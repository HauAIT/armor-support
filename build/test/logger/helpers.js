"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertOutputContains = assertOutputContains;
exports.assertOutputDoesntContain = assertOutputDoesntContain;
exports.getDynamicLogger = getDynamicLogger;
exports.restoreWriters = restoreWriters;
exports.setupWriters = setupWriters;
require("source-map-support/register");
var _chai = _interopRequireDefault(require("chai"));
var _sinon = _interopRequireDefault(require("sinon"));
var _lodash = _interopRequireDefault(require("lodash"));
var _2 = require("../..");
_chai.default.should();
function setupWriters() {
  return {
    'stdout': _sinon.default.spy(process.stdout, 'write'),
    'stderr': _sinon.default.spy(process.stderr, 'write')
  };
}
function getDynamicLogger(testingMode, forceLogs, prefix = null) {
  process.env._TESTING = testingMode ? '1' : '0';
  process.env._FORCE_LOGS = forceLogs ? '1' : '0';
  return _2.logger.getLogger(prefix);
}
function restoreWriters(writers) {
  for (let w of _lodash.default.values(writers)) {
    w.restore();
  }
}
function someoneHadOutput(writers, output) {
  let hadOutput = false;
  let matchOutput = _sinon.default.match(function (value) {
    return value && value.indexOf(output) >= 0;
  }, 'matchOutput');
  for (let writer of _lodash.default.values(writers)) {
    if (writer.calledWith) {
      hadOutput = writer.calledWithMatch(matchOutput);
      if (hadOutput) break;
    }
  }
  return hadOutput;
}
function assertOutputContains(writers, output) {
  if (!someoneHadOutput(writers, output)) {
    throw new Error(`Expected something to have been called with: '${output}'`);
  }
}
function assertOutputDoesntContain(writers, output) {
  if (someoneHadOutput(writers, output)) {
    throw new Error(`Expected nothing to have been called with: '${output}'`);
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9sb2dnZXIvaGVscGVycy5qcyIsIm5hbWVzIjpbIl9jaGFpIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfc2lub24iLCJfbG9kYXNoIiwiXzIiLCJjaGFpIiwic2hvdWxkIiwic2V0dXBXcml0ZXJzIiwic2lub24iLCJzcHkiLCJwcm9jZXNzIiwic3Rkb3V0Iiwic3RkZXJyIiwiZ2V0RHluYW1pY0xvZ2dlciIsInRlc3RpbmdNb2RlIiwiZm9yY2VMb2dzIiwicHJlZml4IiwiZW52IiwiX1RFU1RJTkciLCJfRk9SQ0VfTE9HUyIsImxvZ2dlciIsImdldExvZ2dlciIsInJlc3RvcmVXcml0ZXJzIiwid3JpdGVycyIsInciLCJfIiwidmFsdWVzIiwicmVzdG9yZSIsInNvbWVvbmVIYWRPdXRwdXQiLCJvdXRwdXQiLCJoYWRPdXRwdXQiLCJtYXRjaE91dHB1dCIsIm1hdGNoIiwidmFsdWUiLCJpbmRleE9mIiwid3JpdGVyIiwiY2FsbGVkV2l0aCIsImNhbGxlZFdpdGhNYXRjaCIsImFzc2VydE91dHB1dENvbnRhaW5zIiwiRXJyb3IiLCJhc3NlcnRPdXRwdXREb2VzbnRDb250YWluIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiIsInNvdXJjZXMiOlsidGVzdC9sb2dnZXIvaGVscGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vLi4nO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5cbmZ1bmN0aW9uIHNldHVwV3JpdGVycyAoKSB7XG4gIHJldHVybiB7J3N0ZG91dCc6IHNpbm9uLnNweShwcm9jZXNzLnN0ZG91dCwgJ3dyaXRlJyksXG4gICAgICAgICAgJ3N0ZGVycic6IHNpbm9uLnNweShwcm9jZXNzLnN0ZGVyciwgJ3dyaXRlJyl9O1xufVxuXG5mdW5jdGlvbiBnZXREeW5hbWljTG9nZ2VyICh0ZXN0aW5nTW9kZSwgZm9yY2VMb2dzLCBwcmVmaXggPSBudWxsKSB7XG4gIHByb2Nlc3MuZW52Ll9URVNUSU5HID0gdGVzdGluZ01vZGUgPyAnMScgOiAnMCc7XG4gIHByb2Nlc3MuZW52Ll9GT1JDRV9MT0dTID0gZm9yY2VMb2dzID8gJzEnIDogJzAnO1xuICByZXR1cm4gbG9nZ2VyLmdldExvZ2dlcihwcmVmaXgpO1xufVxuXG5mdW5jdGlvbiByZXN0b3JlV3JpdGVycyAod3JpdGVycykge1xuICBmb3IgKGxldCB3IG9mIF8udmFsdWVzKHdyaXRlcnMpKSB7XG4gICAgdy5yZXN0b3JlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc29tZW9uZUhhZE91dHB1dCAod3JpdGVycywgb3V0cHV0KSB7XG4gIGxldCBoYWRPdXRwdXQgPSBmYWxzZTtcbiAgbGV0IG1hdGNoT3V0cHV0ID0gc2lub24ubWF0Y2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLmluZGV4T2Yob3V0cHV0KSA+PSAwO1xuICB9LCAnbWF0Y2hPdXRwdXQnKTtcblxuICBmb3IgKGxldCB3cml0ZXIgb2YgXy52YWx1ZXMod3JpdGVycykpIHtcbiAgICBpZiAod3JpdGVyLmNhbGxlZFdpdGgpIHtcbiAgICAgIGhhZE91dHB1dCA9IHdyaXRlci5jYWxsZWRXaXRoTWF0Y2gobWF0Y2hPdXRwdXQpO1xuICAgICAgaWYgKGhhZE91dHB1dCkgYnJlYWs7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY3VybHlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGhhZE91dHB1dDtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0T3V0cHV0Q29udGFpbnMgKHdyaXRlcnMsIG91dHB1dCkge1xuICBpZiAoIXNvbWVvbmVIYWRPdXRwdXQod3JpdGVycywgb3V0cHV0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgc29tZXRoaW5nIHRvIGhhdmUgYmVlbiBjYWxsZWQgd2l0aDogJyR7b3V0cHV0fSdgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPdXRwdXREb2VzbnRDb250YWluICh3cml0ZXJzLCBvdXRwdXQpIHtcbiAgaWYgKHNvbWVvbmVIYWRPdXRwdXQod3JpdGVycywgb3V0cHV0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgbm90aGluZyB0byBoYXZlIGJlZW4gY2FsbGVkIHdpdGg6ICcke291dHB1dH0nYCk7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgc2V0dXBXcml0ZXJzLCByZXN0b3JlV3JpdGVycywgYXNzZXJ0T3V0cHV0Q29udGFpbnMsIGFzc2VydE91dHB1dERvZXNudENvbnRhaW4sXG4gIGdldER5bmFtaWNMb2dnZXIsXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxFQUFBLEdBQUFILE9BQUE7QUFHQUksYUFBSSxDQUFDQyxNQUFNLENBQUMsQ0FBQztBQUViLFNBQVNDLFlBQVlBLENBQUEsRUFBSTtFQUN2QixPQUFPO0lBQUMsUUFBUSxFQUFFQyxjQUFLLENBQUNDLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDQyxNQUFNLEVBQUUsT0FBTyxDQUFDO0lBQzVDLFFBQVEsRUFBRUgsY0FBSyxDQUFDQyxHQUFHLENBQUNDLE9BQU8sQ0FBQ0UsTUFBTSxFQUFFLE9BQU87RUFBQyxDQUFDO0FBQ3ZEO0FBRUEsU0FBU0MsZ0JBQWdCQSxDQUFFQyxXQUFXLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxHQUFHLElBQUksRUFBRTtFQUNoRU4sT0FBTyxDQUFDTyxHQUFHLENBQUNDLFFBQVEsR0FBR0osV0FBVyxHQUFHLEdBQUcsR0FBRyxHQUFHO0VBQzlDSixPQUFPLENBQUNPLEdBQUcsQ0FBQ0UsV0FBVyxHQUFHSixTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUc7RUFDL0MsT0FBT0ssU0FBTSxDQUFDQyxTQUFTLENBQUNMLE1BQU0sQ0FBQztBQUNqQztBQUVBLFNBQVNNLGNBQWNBLENBQUVDLE9BQU8sRUFBRTtFQUNoQyxLQUFLLElBQUlDLENBQUMsSUFBSUMsZUFBQyxDQUFDQyxNQUFNLENBQUNILE9BQU8sQ0FBQyxFQUFFO0lBQy9CQyxDQUFDLENBQUNHLE9BQU8sQ0FBQyxDQUFDO0VBQ2I7QUFDRjtBQUVBLFNBQVNDLGdCQUFnQkEsQ0FBRUwsT0FBTyxFQUFFTSxNQUFNLEVBQUU7RUFDMUMsSUFBSUMsU0FBUyxHQUFHLEtBQUs7RUFDckIsSUFBSUMsV0FBVyxHQUFHdkIsY0FBSyxDQUFDd0IsS0FBSyxDQUFDLFVBQVVDLEtBQUssRUFBRTtJQUM3QyxPQUFPQSxLQUFLLElBQUlBLEtBQUssQ0FBQ0MsT0FBTyxDQUFDTCxNQUFNLENBQUMsSUFBSSxDQUFDO0VBQzVDLENBQUMsRUFBRSxhQUFhLENBQUM7RUFFakIsS0FBSyxJQUFJTSxNQUFNLElBQUlWLGVBQUMsQ0FBQ0MsTUFBTSxDQUFDSCxPQUFPLENBQUMsRUFBRTtJQUNwQyxJQUFJWSxNQUFNLENBQUNDLFVBQVUsRUFBRTtNQUNyQk4sU0FBUyxHQUFHSyxNQUFNLENBQUNFLGVBQWUsQ0FBQ04sV0FBVyxDQUFDO01BQy9DLElBQUlELFNBQVMsRUFBRTtJQUNqQjtFQUNGO0VBQ0EsT0FBT0EsU0FBUztBQUNsQjtBQUVBLFNBQVNRLG9CQUFvQkEsQ0FBRWYsT0FBTyxFQUFFTSxNQUFNLEVBQUU7RUFDOUMsSUFBSSxDQUFDRCxnQkFBZ0IsQ0FBQ0wsT0FBTyxFQUFFTSxNQUFNLENBQUMsRUFBRTtJQUN0QyxNQUFNLElBQUlVLEtBQUssQ0FBRSxpREFBZ0RWLE1BQU8sR0FBRSxDQUFDO0VBQzdFO0FBQ0Y7QUFFQSxTQUFTVyx5QkFBeUJBLENBQUVqQixPQUFPLEVBQUVNLE1BQU0sRUFBRTtFQUNuRCxJQUFJRCxnQkFBZ0IsQ0FBQ0wsT0FBTyxFQUFFTSxNQUFNLENBQUMsRUFBRTtJQUNyQyxNQUFNLElBQUlVLEtBQUssQ0FBRSwrQ0FBOENWLE1BQU8sR0FBRSxDQUFDO0VBQzNFO0FBQ0YifQ==
